// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SFightBlood.proto

#ifndef PROTOBUF_SFightBlood_2eproto__INCLUDED
#define PROTOBUF_SFightBlood_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SFightBlood_2eproto();
void protobuf_AssignDesc_SFightBlood_2eproto();
void protobuf_ShutdownFile_SFightBlood_2eproto();

class SFightBlood;
class SFightBlood_FighterInfo;

// ===================================================================

class SFightBlood_FighterInfo : public ::google::protobuf::Message {
 public:
  SFightBlood_FighterInfo();
  virtual ~SFightBlood_FighterInfo();

  SFightBlood_FighterInfo(const SFightBlood_FighterInfo& from);

  inline SFightBlood_FighterInfo& operator=(const SFightBlood_FighterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SFightBlood_FighterInfo& default_instance();

  void Swap(SFightBlood_FighterInfo* other);

  // implements Message ----------------------------------------------

  SFightBlood_FighterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SFightBlood_FighterInfo& from);
  void MergeFrom(const SFightBlood_FighterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 blood = 2;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 2;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SFightBlood.FighterInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_blood();
  inline void clear_has_blood();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 blood_;
  friend void  protobuf_AddDesc_SFightBlood_2eproto();
  friend void protobuf_AssignDesc_SFightBlood_2eproto();
  friend void protobuf_ShutdownFile_SFightBlood_2eproto();

  void InitAsDefaultInstance();
  static SFightBlood_FighterInfo* default_instance_;
};
// -------------------------------------------------------------------

class SFightBlood : public ::google::protobuf::Message {
 public:
  SFightBlood();
  virtual ~SFightBlood();

  SFightBlood(const SFightBlood& from);

  inline SFightBlood& operator=(const SFightBlood& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SFightBlood& default_instance();

  void Swap(SFightBlood* other);

  // implements Message ----------------------------------------------

  SFightBlood* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SFightBlood& from);
  void MergeFrom(const SFightBlood& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SFightBlood_FighterInfo FighterInfo;

  // accessors -------------------------------------------------------

  // required int32 fighthType = 1;
  inline bool has_fighthtype() const;
  inline void clear_fighthtype();
  static const int kFighthTypeFieldNumber = 1;
  inline ::google::protobuf::int32 fighthtype() const;
  inline void set_fighthtype(::google::protobuf::int32 value);

  // repeated .SFightBlood.FighterInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::SFightBlood_FighterInfo& info(int index) const;
  inline ::SFightBlood_FighterInfo* mutable_info(int index);
  inline ::SFightBlood_FighterInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SFightBlood_FighterInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SFightBlood_FighterInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:SFightBlood)
 private:
  inline void set_has_fighthtype();
  inline void clear_has_fighthtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SFightBlood_FighterInfo > info_;
  ::google::protobuf::int32 fighthtype_;
  friend void  protobuf_AddDesc_SFightBlood_2eproto();
  friend void protobuf_AssignDesc_SFightBlood_2eproto();
  friend void protobuf_ShutdownFile_SFightBlood_2eproto();

  void InitAsDefaultInstance();
  static SFightBlood* default_instance_;
};
// ===================================================================


// ===================================================================

// SFightBlood_FighterInfo

// required int32 id = 1;
inline bool SFightBlood_FighterInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SFightBlood_FighterInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SFightBlood_FighterInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SFightBlood_FighterInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SFightBlood_FighterInfo::id() const {
  // @@protoc_insertion_point(field_get:SFightBlood.FighterInfo.id)
  return id_;
}
inline void SFightBlood_FighterInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SFightBlood.FighterInfo.id)
}

// required int32 blood = 2;
inline bool SFightBlood_FighterInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SFightBlood_FighterInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SFightBlood_FighterInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SFightBlood_FighterInfo::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 SFightBlood_FighterInfo::blood() const {
  // @@protoc_insertion_point(field_get:SFightBlood.FighterInfo.blood)
  return blood_;
}
inline void SFightBlood_FighterInfo::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
  // @@protoc_insertion_point(field_set:SFightBlood.FighterInfo.blood)
}

// -------------------------------------------------------------------

// SFightBlood

// required int32 fighthType = 1;
inline bool SFightBlood::has_fighthtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SFightBlood::set_has_fighthtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SFightBlood::clear_has_fighthtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SFightBlood::clear_fighthtype() {
  fighthtype_ = 0;
  clear_has_fighthtype();
}
inline ::google::protobuf::int32 SFightBlood::fighthtype() const {
  // @@protoc_insertion_point(field_get:SFightBlood.fighthType)
  return fighthtype_;
}
inline void SFightBlood::set_fighthtype(::google::protobuf::int32 value) {
  set_has_fighthtype();
  fighthtype_ = value;
  // @@protoc_insertion_point(field_set:SFightBlood.fighthType)
}

// repeated .SFightBlood.FighterInfo info = 2;
inline int SFightBlood::info_size() const {
  return info_.size();
}
inline void SFightBlood::clear_info() {
  info_.Clear();
}
inline const ::SFightBlood_FighterInfo& SFightBlood::info(int index) const {
  // @@protoc_insertion_point(field_get:SFightBlood.info)
  return info_.Get(index);
}
inline ::SFightBlood_FighterInfo* SFightBlood::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:SFightBlood.info)
  return info_.Mutable(index);
}
inline ::SFightBlood_FighterInfo* SFightBlood::add_info() {
  // @@protoc_insertion_point(field_add:SFightBlood.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SFightBlood_FighterInfo >&
SFightBlood::info() const {
  // @@protoc_insertion_point(field_list:SFightBlood.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SFightBlood_FighterInfo >*
SFightBlood::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:SFightBlood.info)
  return &info_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SFightBlood_2eproto__INCLUDED
